<?xml version="1.0"?>
<!--
  Created by christoferdutz on 30.05.15.
-->
<s:GridItemRenderer
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        click="onMoreClicked(event)">

  <fx:Metadata>
    [ResourceBundle("dukecon")]
  </fx:Metadata>

  <fx:Declarations>
    <s:DateTimeFormatter id="timeFormatter"
                         dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.time')}"/>
  </fx:Declarations>

  <s:states>
    <s:State name="long"/>
    <s:State name="normal"/>
    <s:State name="short"/>
  </s:states>

  <fx:Script>
    <![CDATA[
    import org.dukecon.events.ListEvent;
    import org.dukecon.model.Language;
    import org.dukecon.model.Speaker;
    import org.dukecon.services.ResourceService;
    import org.dukecon.services.UserPreferenceService;

    [Bindable]
    protected var featureServerFavorites:Boolean = FEATURE::serverFavorites;

    [Embed(source="/star-unselected.png")]
    [Bindable]
    public var starUnselected:Class;

    [Embed(source="/star-selected.png")]
    [Bindable]
    public var starSelected:Class;

    protected var event:org.dukecon.model.Event;

    public var resourceService:ResourceService;
    public var userPreferenceService:UserPreferenceService;

    public var startTime:Number;
    public var rowNum:Number;

    public static const HEIGHT_PER_STREAM:Number = 394;
    public static const WIDTH_SECONDS_PER_PIXEL:Number = 4;

    [Bindable("dataChange")]
    override public function get data():Object {
      return super.data;
    }

    override public function set data(value:Object):void {
      super.data = value;
      event = org.dukecon.model.Event(value);
      adjustSize();
      update();
    }

    protected function adjustSize():void {
      var lengthInMinutes:Number = (event.end.time - event.start.time) / (1000 * 60);
      if (lengthInMinutes < 40) {
        currentState = "short";
      } else if (length > 120) {
        currentState = "long";
      } else {
        currentState = "normal";
      }
      // Update the position of the item based on it's data.
      x = (event.start.time - startTime) / (1000 * WIDTH_SECONDS_PER_PIXEL);
      y = rowNum * HEIGHT_PER_STREAM;
      width = (event.end.time - event.start.time) / (1000 * WIDTH_SECONDS_PER_PIXEL);

      titleLabel.width = width - 120;
      speakersLabel.width = width - 20;
      abstractLabel.width = width - 20;
    }

    protected function update():void {
      border.visible = event != null;
      if (event) {
        titleLabel.text = event.title;

        var eventMinutes:Number = (event.end.time - event.start.time) / 60000;
        var eventHours:Number = eventMinutes / 60;
        var timeString:String = "";
        if(eventHours > 1) {
          timeString += Math.floor(eventHours) + " h";
        }
        if(eventMinutes % 60 != 0) {
          if(timeString.length > 0) {
            timeString += " ";
          }
          timeString += (eventMinutes % 60) + " min";
        }
        timeLabel.text = timeFormatter.format(event.start) + " (" + timeString + ")";

/*        locationLabel.text = I18nHelper.getName(event.location.names, resourceManager.localeChain[0]);
        locationIcon.source = resourceService.getIconForLocation(event.location.id);
        if (event.track) {
          streamLabel.text = I18nHelper.getName(event.track.names, resourceManager.localeChain[0]);
          streamIcon.source = resourceService.getIconForStream(event.track.id);
        } else {
          streamLabel.text = null;
          streamIcon.source = null;
        }*/
        var language:Language = event.language ? event.language : null;// TODO: Make this get the default language ;
        if(language) {
//          languageLabel.text = I18nHelper.getName(language.names, resourceManager.localeChain[0]);
          languageIcon.source = resourceService.getIconForLanguage(event.language.id);
        }
        var speakerNames:String = "";
        for each(var speaker:Speaker in event.speakers) {
          if (speakerNames != "") {
            speakerNames += ", ";
          }
          if (speaker) {
            speakerNames += speaker.name;
          }
        }
        speakersLabel.text = speakerNames;
        abstractLabel.text = event.abstractText;
      } else {
        titleLabel.text = null;
        timeLabel.text = null;
/*        locationLabel.text = null;
        locationIcon = null;
        streamLabel.text = null;
        streamIcon = null;
        languageLabel.text = null;*/
        languageIcon = null;
        speakersLabel.text = null;
        abstractLabel.text = null;
      }

      updateSelectionIcon();
    }

    protected function updateSelectionIcon():void {
      if (event) {
        favoriteImage.source = userPreferenceService.isEventSelected(event) ? starSelected : starUnselected;
      } else {
        favoriteImage.source = null;
      }
    }

    protected function toggleSelection(evnt:MouseEvent):void {
      if (userPreferenceService.isEventSelected(event)) {
        userPreferenceService.unselectEvent(event);
      } else {
        userPreferenceService.selectEvent(event);
      }
      updateSelectionIcon();
    }

    protected function onMoreClicked(evnt:MouseEvent):void {
      dispatchEvent(new ListEvent(event, ListEvent.ITEM_SELECTED));
    }
    ]]>
  </fx:Script>

  <s:Rect id="border" top="0" left="0" right="0" bottom="0" radiusX="0" radiusY="0">
    <s:fill>
      <s:SolidColor color="0xffffff"/>
    </s:fill>
    <s:stroke>
      <s:SolidColorStroke color="0x555555"/>
    </s:stroke>
  </s:Rect>
  <s:Line bottom="0" left="0" right="0">
    <s:stroke>
      <s:SolidColorStroke color="0x1AA3B1" weight="6"/>
    </s:stroke>
  </s:Line>

  <s:VGroup top="10" left="10" right="10" bottom="10" gap="10">
    <s:HGroup width="100%" height="64" verticalAlign="middle">
      <s:Label id="timeLabel" styleName="talkTime" width="100%"/>
      <s:BitmapImage id="languageIcon"/>
      <s:Image id="favoriteImage" click="toggleSelection(event)"/>
    </s:HGroup>
    <s:Label id="titleLabel" height="100" styleName="talkTitle" maxDisplayedLines="-1"/>
    <s:Label id="speakersLabel" height="56" styleName="talkSpeakers" maxDisplayedLines="-1"/>
    <s:Label id="abstractLabel" height="110" styleName="talkAbstract" maxDisplayedLines="-1"/>

    <!--s:VGroup width="100%" gap="10">
      <s:HGroup width="100%" gap="20" verticalAlign="middle">
        <s:BitmapImage id="locationIcon" width="32" height="32"/>
        <s:Label id="locationLabel" styleName="talkLocation"/>
      </s:HGroup>
      <s:HGroup width="100%" gap="20" verticalAlign="middle">
        <s:BitmapImage id="streamIcon" width="32" height="32"/>
        <s:Label id="streamLabel" styleName="talkStream"/>
      </s:HGroup>
    </s:VGroup-->
  </s:VGroup>

</s:GridItemRenderer>
