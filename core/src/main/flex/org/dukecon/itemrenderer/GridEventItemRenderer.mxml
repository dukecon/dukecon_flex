<?xml version="1.0"?>
<!--
  Created by christoferdutz on 30.05.15.
-->
<s:GridItemRenderer
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:parsley="http://www.spicefactory.org/parsley">

    <fx:Metadata>
        [ResourceBundle("dukecon")]
    </fx:Metadata>

    <fx:Declarations>
        <parsley:FastInject>
            <parsley:Inject property="conferenceController" type="{ConferenceController}" />
            <parsley:Inject property="trackController" type="{TrackController}" />
            <parsley:Inject property="locationController" type="{LocationController}" />
            <parsley:Inject property="languageController" type="{LanguageController}" />
            <parsley:Inject property="userPreferenceController" type="{UserPreferenceController}" />
            <parsley:Inject property="settingsController" type="{SettingsController}" />
        </parsley:FastInject>
        <s:DateTimeFormatter id="timeFormatter"
                             locale="{settingsController.selectedLanguage}"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.time')}"/>
    </fx:Declarations>

    <fx:Script>
    <![CDATA[
        import mx.collections.ArrayCollection;

        import org.dukecon.controller.ConferenceController;
        import org.dukecon.controller.LanguageController;
        import org.dukecon.controller.LocationController;
        import org.dukecon.controller.SettingsController;
        import org.dukecon.controller.TrackController;
        import org.dukecon.controller.UserPreferenceController;
        import org.dukecon.events.ListEvent;
        import org.dukecon.model.Speaker;

        [Embed(source="/star-unselected.png")]
        [Bindable]
        public var starUnselected:Class;

        [Embed(source="/star-selected.png")]
        [Bindable]
        public var starSelected:Class;

        [Bindable]
        protected var event:org.dukecon.model.Event;

        [Bindable]
        protected var trackName:String;
        [Bindable]
        protected var trackIcon:Class;

        [Bindable]
        protected var timeString:String;

        [Bindable]
        protected var locationName:String;
        [Bindable]
        protected var locationIcon:Class;

        [Bindable]
        protected var languageName:String;
        [Bindable]
        protected var languageIcon:Class;

        [Bindable]
        protected var speakerNames:String;

        [Inject]
        public var conferenceController:ConferenceController;

        [Inject]
        public var trackController:TrackController;

        [Inject]
        public var locationController:LocationController;

        [Inject]
        public var languageController:LanguageController;

        [Inject]
        public var userPreferenceController:UserPreferenceController;

        [Inject]
        [Bindable]
        public var settingsController:SettingsController;

        public var startTime:Number;
        public var locationIds:ArrayCollection;

        [Bindable("dataChange")]
        override public function get data():Object {
            return super.data;
        }

        override public function set data(value:Object):void {
            super.data = value;
            event = org.dukecon.model.Event(value);
            update();
        }

        override protected function commitProperties():void {
            super.commitProperties();
            adjustSize();
            update();
        }

        protected function adjustSize():void {
            // Update the position of the item based on it's data.
            x = (event.start.time - startTime) / 4000;
            y = locationIds.getItemIndex(event.locationId) * 394;
            width = (event.end.time - event.start.time) / 4000;
        }

        protected function update():void {
            if (event) {
                timeString = timeFormatter.format(event.start) + " - " + timeFormatter.format(event.end);
                locationName = conferenceController.getLocationName(event.locationId, resourceManager.localeChain[0]);
                locationIcon = locationController.getIconForLocation(event.locationId);
                if(event.trackId) {
                    trackName = conferenceController.getTrackName(event.trackId, resourceManager.localeChain[0]);
                    trackIcon = trackController.getIconForTrack(event.trackId);
                } else {
                    trackName = null;
                    trackIcon = null;
                }
                var languageId:String = event.languageId ? event.languageId : "de";
                languageName = conferenceController.getLanguageName(languageId, resourceManager.localeChain[0]);
                languageIcon = languageController.getIconForLanguage(event.languageId);
                speakerNames = "";
                for each(var speakerId:String in event.speakerIds.split(",")) {
                    var speaker:Speaker = conferenceController.getSpeaker(speakerId);
                    if (speakerNames != "") {
                        speakerNames += ", ";
                    }
                    if(speaker) {
                        speakerNames += speaker.name;
                        if (speaker.company) {
                            speakerNames += " (" + speaker.company + ")";
                        }
                    }
                }
            } else {
                timeString = null;
                locationName = null;
                locationIcon = null;
                trackName = null;
                trackIcon = null;
                languageName = null;
                languageIcon = null;
                speakerNames = null;
            }

            updateSelectionIcon();
        }

        protected function updateSelectionIcon():void {
            if (event) {
                favoriteImage.source = userPreferenceController.isEventSelected(event) ? starSelected : starUnselected;
            } else {
                favoriteImage.source = null;
            }
        }

        protected function toggleSelection(evnt:MouseEvent):void {
            if (userPreferenceController.isEventSelected(event)) {
                userPreferenceController.unselectEvent(event);
            } else {
                userPreferenceController.selectEvent(event);
            }
            updateSelectionIcon();
        }

        protected function onMoreClicked(evnt:MouseEvent):void {
            dispatchEvent(new ListEvent(event, ListEvent.ITEM_SELECTED));
        }

        ]]>
  </fx:Script>

    <s:Rect top="4" left="4" right="4" bottom="4" radiusX="10" radiusY="10" visible="{event != null}">
        <s:fill>
            <s:SolidColor color="0xffffff"/>
        </s:fill>
        <s:stroke>
            <s:SolidColorStroke color="0x000000"/>
        </s:stroke>
    </s:Rect>

    <s:VGroup top="20" left="20" right="20" bottom="20" gap="20" click="onMoreClicked(event)">
        <s:Label text="{event.title}" width="480" height="100" styleName="talkTitle"/>
        <s:Label id="speakersLabel" text="{speakerNames}" width="480" height="56" styleName="talkSpeakers"/>
        <s:VGroup width="100%" gap="10">
            <s:HGroup width="100%" gap="20" verticalAlign="middle">
                <s:Image source="@Embed('/clock.png')" visible="{event != null}" width="32" height="32"/>
                <s:Label text="{timeString}" styleName="talkTime"/>
            </s:HGroup>
            <s:HGroup width="100%" gap="20" verticalAlign="middle">
                <s:Image source="{locationIcon}" width="32" height="32"/>
                <s:Label text="{locationName}" styleName="talkLocation"/>
            </s:HGroup>
            <s:HGroup width="100%" gap="20" verticalAlign="middle">
                <s:Image source="{trackIcon}" width="32" height="32"/>
                <s:Label text="{trackName}" styleName="talkTrack"/>
            </s:HGroup>
            <s:HGroup width="100%" gap="20" verticalAlign="middle">
                <s:Image source="{languageIcon}" width="32" height="32"/>
                <s:Label text="{languageName}" styleName="talkLanguage"/>
            </s:HGroup>
        </s:VGroup>
    </s:VGroup>

    <s:Image id="favoriteImage" top="20" right="20" click="toggleSelection(event)"/>

</s:GridItemRenderer>
