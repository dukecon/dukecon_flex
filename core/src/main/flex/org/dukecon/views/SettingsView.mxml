<?xml version="1.0"?>
<!--
  Created by christoferdutz on 14.07.15.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:parsley="http://www.spicefactory.org/parsley"
        title="{resourceManager.getString('dukecon', 'settings.title')}"
        creationComplete="onCreationComplete(event)">

    <fx:Metadata>
        [ResourceBundle("dukecon")]
    </fx:Metadata>

    <fx:Declarations>
        <parsley:FastInject>
            <parsley:Inject property="conferenceController" type="{ConferenceController}" />
            <parsley:Inject property="settingsController" type="{SettingsController}" />
            <parsley:Inject property="userPreferenceController" type="{UserPreferenceController}" />
        </parsley:FastInject>
    </fx:Declarations>

    <s:navigationContent>
        <s:Button label="&lt;" click="onBackClicked(event)"/>
    </s:navigationContent>

    <fx:Script>

        import mx.events.FlexEvent;
        import mx.logging.ILogger;
        import mx.logging.Log;

        import org.dukecon.controller.ConferenceController;
        import org.dukecon.controller.SettingsController;
        import org.dukecon.controller.UserPreferenceController;
        import org.jboss.keycloak.flex.event.ProviderChangedEvent;

        import spark.components.RadioButton;

        protected static var log:ILogger = Log.getLogger(getQualifiedClassName(SettingsView).replace("::", "."));

        [Inject]
        public var conferenceController:ConferenceController;

        [Inject]
        public var settingsController:SettingsController;

        [Inject]
        public var userPreferenceController:UserPreferenceController;

        protected var languageButtons:Array;

        protected function onCreationComplete(event:FlexEvent):void {
            // Hide the settings action button.
            for each(var button:Button in navigator.actionContent) {
                if (button.name == "settingsButton") {
                    button.visible = false;
                }
            }

            languageButtons = [];
            for each(var language:String in ["de_DE", "en_US"]) {
                var languageButton:RadioButton = new RadioButton();
                languageButton.label = resourceManager.getString('dukecon', 'language.' + language);
                languageButton.value = language;
                languageButton.selected = (language == resourceManager.localeChain[0]);
                languageButton.addEventListener("change", onLanguageChange);
                languageSelection.addElement(languageButton);
                languageButtons.push(languageButton);
            }

            userPreferenceController.addEventListener(ProviderChangedEvent.PROVIDER_CHANGED,
                    function (event:ProviderChangedEvent):void {
                        updateBinding();
                    });

            updateBinding();
        }

        override protected function commitProperties():void {
            super.commitProperties();

            // Select the currently selected locale button.
            for each(var languageButton:RadioButton in languageButtons) {
                languageButton.selected = (languageButton.value == resourceManager.localeChain[0]);
            }
        }

        protected function onBackClicked(event:MouseEvent):void {
            // Un-hide the settings action button.
            for each(var button:Button in navigator.actionContent) {
                if (button.name == "settingsButton") {
                    button.visible = true;
                }
            }
            navigator.popView()
        }

        protected function onLanguageChange(event:Event):void {
            var selectedLanguage:String = String(RadioButton(event.target).value);

            resourceManager.localeChain = [selectedLanguage];
            settingsController.selectedLanguage = String(selectedLanguage);

            log.info("Changed language to: " + selectedLanguage);
        }

        protected function updateBinding():void {
            // Hide the button that currently should not be displayed.
            if (userPreferenceController.provider) {
                var msg:String = resourceManager.getString('dukecon', 'settings.server-account.connected',
                        [userPreferenceController.provider]);
                boundMessage.text = msg;
                connectForm.includeInLayout = connectForm.visible = false;
                disconnectForm.includeInLayout = disconnectForm.visible = true;
            } else {
                connectForm.includeInLayout = connectForm.visible = true;
                disconnectForm.includeInLayout = disconnectForm.visible = false;
            }
        }

        protected function onBindClicked(event:MouseEvent):void {
            // TODO: If the readUserPreferences returns values, ask the user how to merge the data.
            userPreferenceController.readUserPreferences(navigator);
        }

        protected function onUnbindClicked(event:MouseEvent):void {
            // TODO: Ask the user if he is sure that he wants to disconnect.
            userPreferenceController.reset();
        }

    </fx:Script>

    <s:Form width="100%">
        <s:FormItem id="languageSelection"
                    label="{resourceManager.getString('dukecon', 'settings.language')}:"
                    width="300"/>
        <s:FormItem id="connectForm" label="{resourceManager.getString('dukecon', 'settings.server-account')}:" width="300">
            <s:Button id="bindButton"
                      label="{resourceManager.getString('dukecon', 'settings.server-account.bind')}"
                      click="onBindClicked(event)" width="100%"/>
        </s:FormItem>
        <s:FormItem id="disconnectForm"
                    label="{resourceManager.getString('dukecon', 'settings.server-account')}:" width="300">
            <s:VGroup width="100%">
                <s:Label id="boundMessage" paddingBottom="20"/>
                <s:Button id="unbindButton"
                          label="{resourceManager.getString('dukecon', 'settings.server-account.unbind')}"
                          click="onUnbindClicked(event)" width="100%"/>
            </s:VGroup>
        </s:FormItem>
    </s:Form>

</s:View>
