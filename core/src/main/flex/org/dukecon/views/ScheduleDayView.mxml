<?xml version="1.0"?>
<!--
  Created by christoferdutz on 17.02.16.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:parsley="http://www.spicefactory.org/parsley"
        title="{formattedDate}"
        creationComplete="onCreationComplete(event)">

    <fx:Declarations>
        <parsley:Configure/>
        <s:DateTimeFormatter id="formatter"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.date')}"/>
        <s:DateTimeFormatter id="timeFormatter"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.time')}"/>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        import org.dukecon.controller.ConferenceController;
        import org.dukecon.events.ListEvent;
        import org.dukecon.model.Event;
        import org.dukecon.model.Location;
        import org.dukecon.utils.EventItemFactory;

        [Bindable]
        protected var dateString:String;

        [Bindable]
        protected var formattedDate:String;

        protected var dataProvider:ArrayCollection = new ArrayCollection();

        protected var dayStart:Number;
        protected var locationIds:ArrayCollection;

        [Inject]
        public var conferenceController:ConferenceController;

        protected function onCreationComplete(event:FlexEvent):void {
            grid.addEventListener(ListEvent.ITEM_SELECTED, onTalkSelected);
        }

        [Bindable("dataChange")]
        override public function get data():Object {
            return super.data;
        }

        override public function set data(value:Object):void {
            super.data = value;
            dateString = String(value);
            update();
        }

        override protected function commitProperties():void {
            super.commitProperties();
            update();
        }

        protected function update():void {
            var event:org.dukecon.model.Event;

            if (dateString && conferenceController) {
                var matches:Array = dateString.match(/(\d\d\d\d)-(\d\d)-(\d\d)/);
                var date:Date = new Date(int(matches[1]), int(matches[2]) - 1, int(matches[3]));
                formattedDate = formatter.format(date);

                var talksForDay:ArrayCollection = conferenceController.getEventsForDay(dateString);
                var locations:ArrayCollection = conferenceController.locations;

                // Find out the time range in which all events are.
                dayStart = NaN;
                for each(event in talksForDay) {
                    if (event.end.time - event.start.time > 0) {
                        if ((isNaN(dayStart)) || (dayStart > event.start.time)) {
                            dayStart = event.start.time;
                        }
                    }
                }

                locationIds = new ArrayCollection();
                for each(var location:Location in locations) {
                    locationIds.addItem(location.id);
                }

                for each(event in talksForDay) {
                    if (event.end.time - event.start.time > 0) {
                        dataProvider.addItem(event);
                    }
                }
            } else {
                formattedDate = null;
            }
        }

        private function itemRenderer(event:org.dukecon.model.Event):IFactory {
            return new EventItemFactory(dayStart, locationIds);
        }

        protected function onTalkSelected(event:ListEvent):void {
            navigator.pushView(EventView, event.data);
        }

        ]]>
    </fx:Script>

    <s:navigationContent>
        <s:Button label="&lt;" click="{navigator.popView()}"/>
    </s:navigationContent>

    <s:Scroller id="scroller" top="0" left="0" right="0" bottom="0">
        <s:Group width="100%" height="100%"
                 minWidth="{grid.contentWidth}"
                 minHeight="{grid.contentHeight}">
            <s:Rect width="{grid.contentWidth}"
                    height="{grid.contentHeight}">
                <s:fill>
                    <s:SolidColor color="0xEEEEEE"/>
                </s:fill>
            </s:Rect>

            <s:DataGroup id="grid" dataProvider="{dataProvider}"
                         itemRendererFunction="itemRenderer" clipAndEnableScrolling="true">
                <s:layout>
                    <s:BasicLayout/>
                </s:layout>
            </s:DataGroup>
        </s:Group>
    </s:Scroller>

</s:View>
