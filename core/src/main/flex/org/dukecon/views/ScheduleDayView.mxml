<?xml version="1.0"?>
<!--
  Created by christoferdutz on 17.02.16.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:parsley="http://www.spicefactory.org/parsley"
        title="{formattedDate}"
        creationComplete="onCreationComplete(event)">

    <fx:Declarations>
        <parsley:FastInject injectionComplete="init()">
            <parsley:Inject property="eventService" type="{EventService}" />
            <parsley:Inject property="resourceService" type="{ResourceService}" />
        </parsley:FastInject>
        <s:DateTimeFormatter id="formatter"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.date')}"/>
        <s:DateTimeFormatter id="timeFormatter"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.time')}"/>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.events.FlexEvent;

        import org.dukecon.events.ListEvent;
        import org.dukecon.itemrenderer.GridEventItemRenderer;
        import org.dukecon.model.Event;
        import org.dukecon.services.EventService;
        import org.dukecon.services.ResourceService;
        import org.dukecon.utils.EventItemFactory;

        [Bindable]
        protected var dateString:String;
        protected var loadedDataDateString:String = null;

        [Bindable]
        protected var formattedDate:String;

        [Bindable]
        protected var dataProvider:ArrayCollection = null;
        [Bindable]
        protected var gridHeight:Number;
        [Bindable]
        protected var gridWidth:Number;

        protected var dayStart:Number;
        protected var dayEnd:Number;
        protected var locations:ArrayCollection;
        protected var _initialized:Boolean = false;

        public var eventService:EventService;
        public var resourceService:ResourceService;

        protected function onCreationComplete(event:FlexEvent):void {
            grid.addEventListener(ListEvent.ITEM_SELECTED, onTalkSelected);
        }

        [Bindable("dataChange")]
        override public function get data():Object {
            return super.data;
        }

        override public function set data(value:Object):void {
            if(value == data) {
                return;
            }

            super.data = value;
            dateString = String(value);
            update();
        }

        protected function init():void {
            _initialized = true;
            update();
        }

        protected function update():void {
            if(!_initialized) {
                return;
            }

            var event:org.dukecon.model.Event;

            // Only update if we need to.
            if (loadedDataDateString != dateString) {
                if (dateString && eventService) {
                    var matches:Array = dateString.match(/(\d\d\d\d)-(\d\d)-(\d\d)/);
                    var date:Date = new Date(int(matches[1]), int(matches[2]) - 1, int(matches[3]));
                    formattedDate = formatter.format(date);

                    dataProvider = eventService.getEventsForDay(dateString);
                    locations = new ArrayCollection();

                    // Find out the start time (start date of the earliest event)
                    // as well as the list of locations for that day.
                    dayStart = NaN;
                    dayEnd = NaN;
                    for each(event in dataProvider) {
                        if (locations.getItemIndex(event.location) == -1) {
                            locations.addItem(event.location);
                        }

                        if ((isNaN(dayStart)) || (dayStart > event.start.time)) {
                            dayStart = event.start.time;
                        }
                        if ((isNaN(dayEnd)) || (dayEnd < event.end.time)) {
                            dayEnd = event.end.time;
                        }
                    }
                    loadedDataDateString = dateString;

                    // Sort the locations by order.
                    var orderSortField:SortField = new SortField();
                    orderSortField.name = "order";
                    orderSortField.numeric = true;
                    var locationSort:Sort = new Sort();
                    locationSort.fields = [orderSortField];
                    locations.sort = locationSort;
                    locations.refresh();

                    gridHeight = locations.length * GridEventItemRenderer.HEIGHT_PER_STREAM;
                    gridWidth = (dayEnd - dayStart) / (1000 * GridEventItemRenderer.WIDTH_SECONDS_PER_PIXEL);
                } else {
                    formattedDate = null;
                    dataProvider = null;
                    locations = null;
                    dayStart = NaN;
                }
            }
        }

        private function itemRenderer(event:org.dukecon.model.Event):IFactory {
            return new EventItemFactory(dayStart, locations.getItemIndex(event.location), resourceService);
        }

        protected function onTalkSelected(event:ListEvent):void {
            navigator.pushView(EventView, event.data);
        }

        ]]>
    </fx:Script>

    <s:navigationContent>
        <s:Button label="&lt;" click="{navigator.popView()}"/>
    </s:navigationContent>

    <s:Scroller id="scroller" top="0" left="0" right="0" bottom="0">
        <s:Group width="100%" height="100%"
                 minWidth="{gridWidth}"
                 minHeight="{gridHeight}">
            <s:Rect width="{gridWidth}"
                    height="{gridHeight}">
                <s:fill>
                    <s:SolidColor color="0xEEEEEE"/>
                </s:fill>
            </s:Rect>

            <s:DataGroup id="grid" dataProvider="{dataProvider}" width="{gridWidth}" height="{gridHeight}"
                         itemRendererFunction="itemRenderer" clipAndEnableScrolling="true">
                <s:layout>
                    <s:BasicLayout/>
                </s:layout>
            </s:DataGroup>
        </s:Group>
    </s:Scroller>

</s:View>
