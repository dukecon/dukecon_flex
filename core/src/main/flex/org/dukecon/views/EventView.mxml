<?xml version="1.0"?>
<!--
  Created by christoferdutz on 06.07.15.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:parsley="http://www.spicefactory.org/parsley">

    <fx:Metadata>
        [ResourceBundle("dukecon")]
    </fx:Metadata>

    <fx:Declarations>
        <parsley:FastInject injectionComplete="init()">
            <parsley:Inject property="conferenceService" type="{ConferenceService}" />
            <parsley:Inject property="resourceService" type="{ResourceService}" />
            <parsley:Inject property="ratingService" type="{RatingService}" />
            <parsley:Inject property="userPreferenceService" type="{UserPreferenceService}" />
        </parsley:FastInject>
        <s:DateTimeFormatter id="startTimeFormatter"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.dateTime')}"/>
        <s:DateTimeFormatter id="endTimeFormatter"
                             dateTimePattern="{resourceManager.getString('dukecon', 'dateTime.time')}"/>
        <s:RadioButtonGroup id="ratingGroup" itemClick="onRatingChanged(event)"/>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import mx.core.UIComponent;
        import mx.events.ItemClickEvent;

        import org.dukecon.model.Event;
        import org.dukecon.model.Speaker;
        import org.dukecon.services.ConferenceService;
        import org.dukecon.services.RatingService;
        import org.dukecon.services.ResourceService;
        import org.dukecon.services.UserPreferenceService;
        import org.dukecon.utils.I18nHelper;

        [Bindable]
        protected var featureServerFavorites:Boolean = FEATURE::serverFavorites;

        [Bindable]
        protected var featureEventRating:Boolean = FEATURE::eventRating;

        [Embed(source="/star-unselected.png")]
        [Bindable]
        public var starUnselected:Class;

        [Embed(source="/star-selected.png")]
        [Bindable]
        public var starSelected:Class;

        [Bindable]
        protected var event:org.dukecon.model.Event;
        protected var _initialized:Boolean = false;

        [Bindable]
        protected var selectedIcon:Class;

        [Bindable]
        protected var speakers:String;

        [Bindable]
        protected var locationName:String;

        [Bindable]
        protected var streamName:String;

        public var conferenceService:ConferenceService;
        public var resourceService:ResourceService;
        public var ratingService:RatingService;
        public var userPreferenceService:UserPreferenceService;


        [Bindable("dataChange")]
        override public function get data():Object {
            return super.data;
        }

        override public function set data(value:Object):void {
            super.data = value;
            event = org.dukecon.model.Event(data);
            update();
        }

        protected function init():void {
            _initialized = true;
            update();
        }

        protected function update():void {
            if (!_initialized) {
                return;
            }

            if (event && resourceService) {
                updateSelectionIcon();
                if (event) {
                    if (event.track) {
                        streamIcon.source = resourceService.getIconForStream(event.track.id);
                    } else {
                        streamIcon.source = null;
                    }

                    if (event.language) {
                        languageIcon.source = resourceService.getIconForLanguage(event.language.id);
                        locationMap.source = resourceService.getMapForLocation(event.location.id);
                    } else {
                        languageIcon.source = null;
                        locationMap.source = null;
                    }
                } else {
                    streamIcon = null;
                    languageIcon.source = null;
                    locationMap.source = null;
                }
                speakers = "";
                if (event.speakers) {
                    for each(var speaker:Speaker in event.speakers) {
                        if (speakers.length > 0) {
                            speakers += ", ";
                        }
                        speakers += speaker.name;
                        if (speaker.company) {
                            speakers += " (" + speaker.company + ")";
                        }
                    }
                }
                title = startTimeFormatter.format(event.start) + " - " + endTimeFormatter.format(event.end);
                ratingGroup.selectedValue = ratingService.getRating(event);
                locationName = I18nHelper.getName(event.location.names, resourceManager.localeChain[0]);
                if (event.track && event.track.id) {
                    streamName = I18nHelper.getName(event.track.names, resourceManager.localeChain[0]);
                } else {
                    streamName = null;
                }
            } else {
                streamIcon = null;
                streamName = null;
                languageIcon = null;
                speakers = null;
                locationName = null;
            }
        }

        protected function updateSelectionIcon():void {
            if (event) {
                selectedIcon = userPreferenceService.isEventSelected(event) ? starSelected : starUnselected;
            } else {
                selectedIcon = null;
            }
        }

        protected function toggleSelection(evnt:MouseEvent):void {
            if (userPreferenceService.isEventSelected(event)) {
                userPreferenceService.unselectEvent(event);
            } else {
                userPreferenceService.selectEvent(event);
            }
            updateSelectionIcon();
        }

        protected function onRatingChanged(evnt:ItemClickEvent):void {
//        conferenceController.setRating(event, Number(ratingGroup.selectedValue))
        }
        ]]>
    </fx:Script>

    <s:navigationContent>
        <s:Button label="&lt;" click="{navigator.popView()}"/>
    </s:navigationContent>

    <s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
        <s:VGroup width="100%" padding="10" gap="30">
            <s:Group width="100%">
                <s:Rect top="4" left="4" right="4" height="150" radiusX="10" radiusY="10" visible="{event != null}">
                    <s:fill>
                        <s:SolidColor color="0x1AA3B1"/>
                    </s:fill>
                </s:Rect>

                <s:Label id="titleLabel" text="{event.title}" top="20" left="20" width="440" styleName="title"/>

                <s:Rect top="20" right="100" width="64" height="64" visible="{event != null}">
                    <s:fill>
                        <s:SolidColor color="0xffffff"/>
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke color="black"/>
                    </s:stroke>
                </s:Rect>

                <s:Image id="streamIcon" top="22" right="100" width="64" height="64"/>

                <s:Image source="{selectedIcon}" top="20" right="20" click="toggleSelection(event)"/>

                <s:Image id="languageIcon" top="100" right="28" width="48" height="36"/>
            </s:Group>
            <s:Label text="{event.abstractText}" styleName="content" width="{UIComponent(parent).width - 20}"/>
            <s:Label text="{speakers}" width="{UIComponent(parent).width - 20}" fontWeight="bold"/>
            <s:HGroup>
                <s:Label text="{resourceManager.getString('dukecon', 'talks.time')}:" fontWeight="bold"/>
                <s:Label text="{startTimeFormatter.format(event.start)} - {endTimeFormatter.format(event.end)}"
                         styleName="content"/>
            </s:HGroup>
            <s:HGroup>
                <s:Label text="{resourceManager.getString('dukecon', 'talks.stream')}:" fontWeight="bold"/>
                <s:Label text="{streamName}" styleName="content"/>
            </s:HGroup>
            <s:HGroup>
                <s:Label text="{resourceManager.getString('dukecon', 'talks.room')}:" fontWeight="bold"/>
                <s:Label text="{locationName}" styleName="content"/>
            </s:HGroup>
            <s:Image id="locationMap" width="{UIComponent(parent).width - 20}"
                     height="{(UIComponent(parent).width - 20) / 1.5}"/>
            <s:HGroup visible="{featureEventRating}">
                <s:Label text="{resourceManager.getString('dukecon', 'talks.rating')}:" fontWeight="bold"/>
                <s:RadioButton groupName="ratingGroup" value="-1" color="red"
                               skinClass="org.dukecon.skins.ImageRadioButtonSkin"/>
                <s:RadioButton groupName="ratingGroup" value="0" color="#FFA500"
                               skinClass="org.dukecon.skins.ImageRadioButtonSkin"/>
                <s:RadioButton groupName="ratingGroup" value="1" color="green"
                               skinClass="org.dukecon.skins.ImageRadioButtonSkin"/>
            </s:HGroup>
        </s:VGroup>
    </s:Scroller>

</s:View>
